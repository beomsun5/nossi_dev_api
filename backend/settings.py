"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
BASE_URL = os.environ.get("BASE_URL")

# base directory to store testcases
TESTCASE_BASE_DIR = os.environ.get("TESTCASE_BASE_DIR")
RUN_BASE_DIR = os.environ.get("RUN_BASE_DIR")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    'cote.nossi.dev',
    'api-mywuf.run.goorm.io',
    'api-mywuf.run.goorm.site',
]


# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    # SwaggerUI
    'drf_yasg',
    # App
    'rest',
    # Django REST Framework
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    # django-allauth -> social login
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.kakao',
    # corsheaders
    'corsheaders',
    # sslserver
    'sslserver',
    # django-ratelimit
    'django_ratelimit',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # CORS
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    # django-allauth account middleware:
    'allauth.account.middleware.AccountMiddleware',
    'rest.middleware.DomainCheckMiddleware',
]

ROOT_URLCONF = 'backend.urls'

# rest 앱에서 정의한 User 모델을 사용함
AUTH_USER_MODEL = 'rest.User'

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]


REST_AUTH = {
    "TOKEN_MODEL": None,			#	이 3개 사용하면 access, refresh 토큰 자동 발급되는 것 같은데
    "USE_JWT": True,				#	JWT 세팅을 별도로 해줘야함
    "JWT_AUTH_HTTPONLY": False,	    #	알아서 쓰셈
    
    'JWT_AUTH_COOKIE' : 'access',
    'JWT_AUTH_REFRESH_COOKIE' : "refresh_token",
    'JWT_AUTH_COOKIE_USE_CSRF' : True,
    'SESSION_LOGIN' : False,
 	"REGISTER_SERIALIZER": "rest.serializers.UserRegisterSerializer",
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# KAKAO Application Information (Information to be secured)
KAKAO_REST_API_KEY = os.environ.get("SOCIAL_AUTH_KAKAO_REST_KEY")
KAKAO_CLIENT_ID = os.environ.get("SOCIAL_AUTH_KAKAO_CLIENT_ID")
KAKAO_ADMIN_KEY = os.environ.get("SOCIAL_AUTH_KAKAO_ADMIN_KEY")

SOCIAL_LOGIN_REDIRECT_URI = "https://cote.nossi.dev/account"

# KAKAO URI
KAKAO_LOGIN_CALLBACK_URI = f"{BASE_URL}accounts/kakao/login/callback/"
KAKAO_LOGIN_FINALIZE_URI = f"{BASE_URL}accounts/kakao/login/finalize/"
KAKAO_LOGOUT_REDIRECT_URI = "https://cote.nossi.dev/account"
# KAKAO_LOGOUT_REDIRECT_URI = f"{BASE_URL}accounts/kakao/logout/home-redirect/"

# Find ID value from the database (Use shell)
SITE_ID = 3

# Django Allauth settings
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # username 필드 사용 x
ACCOUNT_USERNAME_REQUIRED = False        # username 필드 사용 x
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
SOCIALACCOUNT_STORE_TOKENS = True

# Rest framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest.authentications.SocialTokenAuthentication',
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',        
        # 'dj_rest_auth.jwt_auth.JWTCookieAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
        #'rest_framework.permissions.IsAuthenticated',        
    ],
}

# SOCIALACCOUNT_ADAPTER
SOCIALACCOUNT_ADAPTER = 'rest.adapters.CustomSocialAccountAdapter'

""" JWT Configuration"""
REST_USE_JWT = True
JWT_AUTH_COOKIE = 'access'
JWT_AUTH_REFRESH_COOKIE = 'refresh'

# 추가 JWT 설정 (모두 필요한 내용은 아님)
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': os.environ.get("DJANGO_SECRET_KEY"),
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# WSGI
WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DB_USER = os.environ.get("DB_USER")
DB_PASSWORD = os.environ.get("DB_PASSWORD")
DB_NAME = os.environ.get("DB_NAME")
DB_HOST = os.environ.get("DB_HOST")
DB_PORT = os.environ.get("DB_PORT")
DB_ENGINE = os.environ.get("DB_ENGINE")

TEST_DB_USER = os.environ.get("TEST_DB_USER")
TEST_DB_PASSWORD = os.environ.get("TEST_DB_PASSWORD")
TEST_DB_NAME = os.environ.get("TEST_DB_NAME")
TEST_DB_HOST = os.environ.get("TEST_DB_HOST")
TEST_DB_PORT = os.environ.get("TEST_DB_PORT")
TEST_DB_ENGINE = os.environ.get("TEST_DB_ENGINE")

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINE,
        'NAME': DB_NAME,
        'USER': DB_USER,
        'PASSWORD': DB_PASSWORD,
        'HOST': DB_HOST,
        'PORT': DB_PORT,             # MySQL Default Port Number : 3306
        'CONN_MAX_AGE': 600,        # Keep connections open for 600 seconds (10 minutes)
        'CONN_HEALTH_CHECKS': True, # Enable health checks for persistent connections
    },
    'test': {
        'ENGINE': TEST_DB_ENGINE,
        'NAME': TEST_DB_NAME,  # Test database (Django automatically put prefix 'test_')
        'USER': TEST_DB_USER,
        'PASSWORD': TEST_DB_PASSWORD,
        'HOST': TEST_DB_HOST,
        'PORT': TEST_DB_PORT,             # MySQL Default Port Number : 3306
    }
}

# Use the test database configuration when running tests
import sys
if 'test' in sys.argv or 'test_coverage' in sys.argv:
    DATABASES['default'] = DATABASES['test']

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

### Cache Settings ###
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',  # Redis DB 1 for general caching
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
    'cache_for_ratelimit': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/2',  # Redis DB 2 for throttling or rate limiting
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
RATELIMIT_USE_CACHE = 'cache_for_ratelimit'

### Celery Settings ###
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

### Logger ###
# Define the base directory for storing log files
LOGGING_DIR = Path(BASE_DIR) / 'logs'

# Ensure the log directory exists
LOGGING_DIR.mkdir(parents=True, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {pathname} {lineno} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'debug.log',
            'formatter': 'verbose',
        },
        'file_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'info.log',
            'formatter': 'verbose',
        },
        'file_warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'warning.log',
            'formatter': 'verbose',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'error.log',
            'formatter': 'verbose',
        },
        'file_critical': {
            'level': 'CRITICAL',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'critical.log',
            'formatter': 'verbose',
        },
        'api_file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'api_debug.log',
            'formatter': 'verbose',
        },
        'api_file_info': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'api_info.log',
            'formatter': 'verbose',
        },
        'api_file_warning': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'api_warning.log',
            'formatter': 'verbose',
        },
        'api_file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': LOGGING_DIR / 'api_error.log',
            'formatter': 'verbose',
        },
    },

    'loggers': {
        'django': {
            'handlers': ['file_debug', 'file_info', 'file_error', 'file_warning'],
            'level': 'DEBUG',  # Log all messages from DEBUG and above
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file_debug', 'file_error'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['file_debug'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'rest': {
            'handlers': ['api_file_debug', 'api_file_info', 'api_file_error', 'api_file_warning'],
            'level': 'INFO',  # Log all messages from INFO and above
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['file_warning'],
        'level': 'WARNING',
    },
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Automatic '/' addition to the end of URL
APPEND_SLASH = True


### CORS Setting ###
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_ORIGINS = [
    # 'http://127.0.0.1:3000',
    'http://localhost:8080',
    'https://kauth.kakao.com',
    'https://cote.nossi.dev',
]

CSRF_TRUSTED_ORIGINS = [
    'http://localhost:8080',
    'https://api-mywuf.run.goorm.site',
]

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Content-Type',
    'Authorization',
    'X-Requested-With',
    'X-CSRFToken',
    'X-Frame-Options',
]

# CORS_ALLOW_ALL_ORIGINS = True # 모든 ORIGIN Cross-Origin 허용